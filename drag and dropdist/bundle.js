(()=>{"use strict";var e={583:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Component=void 0,t.Component=class{constructor(e,t,r,n){this.templateElement=document.getElementById(e),this.hostElement=document.getElementById(t);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,n&&(this.element.id=n),this.attach(r)}attach(e){this.hostElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}}},377:function(e,t,r){var n=this&&this.__decorate||function(e,t,r,n){var s,i=arguments.length,o=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,r,o):s(t,r))||o);return i>3&&o&&Object.defineProperty(t,r,o),o};Object.defineProperty(t,"__esModule",{value:!0}),t.ProjectInput=void 0;const s=r(583),i=r(954),o=r(905),a=r(169);class l extends s.Component{constructor(){super("project-input","app",!0,"user-input"),this.titleInputElement=this.element.querySelector("#title"),this.descriptionInputElement=this.element.querySelector("#description"),this.peopleInputElement=this.element.querySelector("#people"),this.configure()}renderContent(){}gatherUserInput(){const e=this.titleInputElement.value,t=this.titleInputElement.value,r=this.titleInputElement.value;this.clearInputs();const n={value:e,required:!0,minLength:5},s={value:e,required:!0,minLength:5},o={value:e,required:!0,min:5,max:5};return i.validate(n)&&i.validate(s)&&i.validate(o)?[e,t,+r]:void alert("invalid input")}clearInputs(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.peopleInputElement.value=""}submitHandler(e){e.preventDefault();const t=this.gatherUserInput();if(Array.isArray(t)){const[e,r,n]=t;a.projectState.addProject(e,r,n),this.clearInputs()}}configure(){this.element.addEventListener("submit",this.submitHandler.bind(this))}}n([o.autobind],l.prototype,"submitHandler",null),t.ProjectInput=l},633:function(e,t,r){var n=this&&this.__decorate||function(e,t,r,n){var s,i=arguments.length,o=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,r,o):s(t,r))||o);return i>3&&o&&Object.defineProperty(t,r,o),o};Object.defineProperty(t,"__esModule",{value:!0}),t.ProjectItem=void 0;const s=r(583),i=r(905);class o extends s.Component{constructor(e,t){super("single-project",e,!1,t.id),this.project=t,this.configure(),this.renderContent()}get persons(){return 1===this.project.people?"1 person":`${this.project.people} persons`}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragStartHandler)}renderContent(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons+"assigned.",this.element.querySelector("p").textContent=this.project.description}}n([i.autobind],o.prototype,"dragStartHandler",null),n([i.autobind],o.prototype,"dragEndHandler",null),t.ProjectItem=o},134:function(e,t,r){var n=this&&this.__decorate||function(e,t,r,n){var s,i=arguments.length,o=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,r,o):s(t,r))||o);return i>3&&o&&Object.defineProperty(t,r,o),o};Object.defineProperty(t,"__esModule",{value:!0}),t.ProjectList=void 0;const s=r(294),i=r(583),o=r(905),a=r(169),l=r(633);class c extends i.Component{constructor(e){super("project-list","app",!1,`${e}-projects`),this.type=e,this.assignedProjects=[],this.renderContent(),this.configure()}dragOverHandler(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}dropHandler(e){const t=e.dataTransfer.getData("text/plain");a.projectState.moveProject(t,"active"===this.type?s.ProjectStatus.Active:s.ProjectStatus.Finished)}renderProjects(){document.getElementById(`${this.type}-projects-list`).innerHTML="",this.assignedProjects.forEach((e=>{new l.ProjectItem(this.element.querySelector("ul").id,e)}))}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler),a.projectState.addListener((e=>{const t=e.filter((e=>"active"===this.type?e.status===s.ProjectStatus.Active:e.status===s.ProjectStatus.Finished));this.assignedProjects=t,this.renderProjects()}))}renderContent(){const e=`${this.type}-projects-list`;this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=this.type.toUpperCase()+"PROJECTS"}}n([o.autobind],c.prototype,"dragOverHandler",null),n([o.autobind],c.prototype,"dragLeaveHandler",null),n([o.autobind],c.prototype,"dropHandler",null),t.ProjectList=c},905:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.autobind=void 0,t.autobind=function(e,t,r){const n=r.value;return{configurable:!0,get(){return n.bind(this)}}}},294:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.ProjectStatus=t.Project=void 0,t.Project=class{constructor(e,t,r,n,s){this.id=e,this.title=t,this.description=r,this.people=n,this.status=s}},(r=t.ProjectStatus||(t.ProjectStatus={}))[r.Active=0]="Active",r[r.Finished=1]="Finished"},169:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.projectState=void 0;const n=r(294);class s extends class{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}{constructor(){super(),this.projects=[]}static getInstance(){return this.instance||(this.instance=new s),this.instance}addProject(e,t,r){const s=new n.Project(Math.random().toString(),e,t,r,n.ProjectStatus.Active);this.projects.push(s),this.listeners.forEach((e=>{e([...this.projects])}))}moveProject(e,t){const r=this.projects.find((t=>t.id===e));r&&r.status!==t&&(r.status=t,this.updateListeners())}updateListeners(){for(const e of this.listeners)e(this.projects.slice())}}t.projectState=s.getInstance()},954:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.validate=void 0,t.validate=function(e){let t=!0;return e.required&&(t=t&&0!==e.value.toString().trim().length),null!=e.minLength&&"string"==typeof e.value&&(t=t&&e.value.length>e.minLength),null!=e.maxLength&&"string"==typeof e.value&&(t=t&&e.value.length<e.maxLength),null!=e.min&&"number"==typeof e.value&&(t=t&&e.value>e.min),null!=e.max&&"number"==typeof e.value&&(t=t&&e.value>e.max),t}}},t={};function r(n){var s=t[n];if(void 0!==s)return s.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}(()=>{const e=r(377),t=r(134);new e.ProjectInput,new t.ProjectList("active"),new t.ProjectList("finished")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,